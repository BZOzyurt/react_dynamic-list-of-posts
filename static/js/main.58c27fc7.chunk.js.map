{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","api/comments.ts","components/PostDetails.tsx","components/UserSelector.tsx","api/posts.ts","App.tsx","api/users.ts","index.tsx"],"names":["PostsList","posts","onSelectPost","useState","currenPost","setCurrentPost","className","map","post","id","title","type","classNames","onClick","handleSelectPost","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","NewCommentForm","postId","onAddComment","name","setName","email","setEmail","setBody","bodyError","setBodyError","nameError","setNameError","emailError","setEmailError","loading","setLoading","postComment","commentData","a","postedComment","onSubmit","event","preventDefault","length","htmlFor","value","onChange","target","placeholder","getPostComments","PostDetails","comments","setComments","error","setError","isCommenting","setIsCommenting","getComments","loadedComments","useEffect","comment","href","commentId","prevComments","filter","UserSelector","users","onUserSelect","selectUser","setSelectUser","selectedUserName","setSelectedUserName","isDropdownVisible","isVisible","onBlur","role","user","onMouseDown","handleUserSelection","getUserPosts","userId","App","setPosts","selectedPost","setSelectedPost","setUsers","selectedUser","setSelectedUser","isLoading","setIsLoading","loadUsers","loadedUsers","loadPosts","loadedPosts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.58c27fc7.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[],\n  onSelectPost: (post: Post | null) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  onSelectPost,\n}) => {\n  const [currenPost, setCurrentPost] = useState(-1);\n\n  const handleSelectPost = (post: Post) => {\n    setCurrentPost(post.id);\n    onSelectPost(post);\n  };\n\n  const handleDeselectPost = () => {\n    onSelectPost(null);\n    setCurrentPost(-1);\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map((post) => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames(\n                    'button',\n                    'is-link',\n                    {\n                      'is-light': currenPost !== post.id,\n                    },\n                  )}\n                  onClick={() => (\n                    currenPost === post.id\n                      ? handleDeselectPost()\n                      : handleSelectPost(post)\n                  )}\n                >\n                  {currenPost === post.id ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { client } from '../utils/fetchClient';\nimport { CommentData, Comment } from '../types/Comment';\n\ntype Props = {\n  postId: number;\n  onAddComment: (comment: Comment) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  onAddComment,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [bodyError, setBodyError] = useState(false);\n  const [nameError, setNameError] = useState(false);\n  const [emailError, setEmailError] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const postComment = async (commentData: CommentData) => {\n    setLoading(true);\n\n    try {\n      const postedComment = await client.post<Comment>(\n        '/comments',\n        commentData,\n      );\n\n      onAddComment(postedComment);\n    } catch (error) {\n      // some error handling\n    }\n\n    setLoading(false);\n  };\n\n  const handleAddComment = (event: React.FormEvent) => {\n    event.preventDefault();\n    setNameError(name.length === 0);\n    setEmailError(email.length === 0);\n    setBodyError(body.length === 0);\n\n    if (name.length === 0\n        || email.length === 0\n        || body.length === 0) {\n      return;\n    }\n\n    postComment({\n      name,\n      email,\n      body,\n      postId,\n    });\n    setBody('');\n  };\n\n  const handleNameChange = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setNameError(false);\n    setName(event.target.value);\n  };\n\n  const handleEmailChange = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setEmailError(false);\n    setEmail(event.target.value);\n  };\n\n  const handleBodyChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    setBodyError(false);\n    setBody(event.target.value);\n  };\n\n  const handleClear = () => {\n    setNameError(false);\n    setEmailError(false);\n    setBodyError(false);\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleAddComment}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={handleNameChange}\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              {\n                'is-danger': nameError,\n              },\n            )}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {nameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {nameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            value={email}\n            onChange={handleEmailChange}\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              {\n                'is-danger': emailError,\n              },\n            )}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {emailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {emailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            value={body}\n            onChange={handleBodyChange}\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              {\n                'is-danger': bodyError,\n              },\n            )}\n          />\n        </div>\n\n        {bodyError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button',\n              'is-link',\n              {\n                'is-loading': loading,\n              },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getPostComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport { Post } from '../types/Post';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment } from '../types/Comment';\nimport { getPostComments } from '../api/comments';\nimport { client } from '../utils/fetchClient';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  post,\n}) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [isCommenting, setIsCommenting] = useState(false);\n\n  const getComments = async (postId: number) => {\n    setLoading(true);\n    setError(false);\n    try {\n      const loadedComments = await getPostComments(postId);\n\n      setComments(loadedComments);\n    } catch (err) {\n      setError(true);\n    }\n\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    setIsCommenting(false);\n    setComments([]);\n    getComments(post.id);\n  }, [post]);\n\n  const handleWriteComment = () => {\n    setIsCommenting(true);\n  };\n\n  const deleteComment = (commentId: number) => {\n    setComments((prevComments) => (\n      prevComments.filter(comment => comment.id !== commentId)\n    ));\n    client.delete(`/comments/${commentId}`);\n  };\n\n  const addComment = (comment: Comment) => {\n    setComments((prevComments) => ([\n      ...prevComments,\n      comment,\n    ]));\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post.id}: ${post.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {loading && (\n            <Loader />\n          )}\n\n          {error && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {!loading && !error && comments.length === 0 && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {comments.length > 0 && (\n            <p className=\"title is-4\">Comments:</p>\n          )}\n\n          {comments.map((comment) => (\n            <article\n              key={comment.id}\n              className=\"message is-small\"\n              data-cy=\"Comment\"\n            >\n\n              <div className=\"message-header\">\n                <a\n                  href={`mailto:${comment.email}`}\n                  data-cy=\"CommentAuthor\"\n                >\n                  {comment.name}\n                </a>\n                <button\n                  data-cy=\"CommentDelete\"\n                  type=\"button\"\n                  className=\"delete is-small\"\n                  aria-label=\"delete\"\n                  onClick={() => deleteComment(comment.id)}\n                >\n                  delete button\n                </button>\n              </div>\n\n              <div className=\"message-body\" data-cy=\"CommentBody\">\n                {comment.body}\n              </div>\n            </article>\n          ))}\n\n          {!loading && !error && !isCommenting && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={handleWriteComment}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isCommenting && (\n          <NewCommentForm\n            postId={post.id}\n            onAddComment={addComment}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  onUserSelect: (user: User) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  onUserSelect,\n}) => {\n  const [selectUser, setSelectUser] = useState(false);\n  const [selectedUserName, setSelectedUserName] = useState('Choose a user');\n\n  const isDropdownVisible = (isVisible: boolean) => {\n    setSelectUser(isVisible);\n  };\n\n  const handleUserSelection = (user: User) => {\n    onUserSelect(user);\n    setSelectUser(false);\n    setSelectedUserName(user.name);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        {\n          'is-active': selectUser,\n        },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => isDropdownVisible(true)}\n          onBlur={() => isDropdownVisible(false)}\n        >\n\n          <span>{selectedUserName || 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map((user) => (\n            <a\n              key={user.id}\n              href={`#${user.id}`}\n              className={classNames(\n                'dropdown-item',\n                {\n                  'is-active': selectedUserName === user.name,\n                },\n              )}\n              onMouseDown={() => handleUserSelection(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getUserPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { Post } from './types/Post';\nimport { User } from './types/User';\nimport { getUsers } from './api/users';\nimport { getUserPosts } from './api/posts';\n\nexport const App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const loadUsers = async () => {\n    const loadedUsers = await getUsers();\n\n    setUsers(loadedUsers);\n  };\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  const loadPosts = async (userId: number) => {\n    setIsLoading(true);\n    setError(false);\n    try {\n      const loadedPosts = await getUserPosts(userId);\n\n      setPosts(loadedPosts);\n    } catch (err) {\n      setError(true);\n    }\n\n    setIsLoading(false);\n  };\n\n  const selectedUserPosts = (user: User) => {\n    setSelectedUser(user);\n    setPosts([]);\n  };\n\n  useEffect(() => {\n    setSelectedPost(null);\n\n    if (selectedUser) {\n      loadPosts(selectedUser.id);\n    } else {\n      setPosts([]);\n    }\n  }, [selectedUser?.id]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  onUserSelect={selectedUserPosts}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && (\n                  <Loader />\n                )}\n\n                {error && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {(selectedUser)\n                  && (posts.length === 0)\n                  && (!error)\n                  && (\n                    <div\n                      className=\"notification is-warning\"\n                      data-cy=\"NoPostsYet\"\n                    >\n                      No posts yet\n                    </div>\n                  )}\n\n                {selectedUser && (posts.length > 0) && (\n                  <PostsList\n                    posts={posts}\n                    onSelectPost={setSelectedPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': selectedPost,\n              },\n            )}\n          >\n            {selectedPost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails post={selectedPost} />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}